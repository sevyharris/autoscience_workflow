# Autoscience Project Snakemake Workflow
import os


DFT_DIR = os.path.abspath(os.path.join(workflow.basedir, '..', 'results', 'dft'))
os.environ['DFT_DIR'] = DFT_DIR
try:
    species_index = config['species_index']
except KeyError:
    species_index = 30

try:
    reaction_index = config['reaction_index']
except KeyError:
    reaction_index = 1


species_dir = os.path.join(DFT_DIR, 'thermo', f'species_{species_index:04}')
confomers_dir = os.path.join(species_dir, 'conformers')
rotors_dir = os.path.join(species_dir, 'rotors')
arkane_dir = os.path.join(species_dir, 'arkane')

reaction_dir = os.path.join(DFT_DIR, 'kinetics', f'reaction_{reaction_index:04}')


rmg_runs_dir = ''
rmg_input_file = ''
rule run_rmg:
    shell:
        "echo hello"

rank_reactions_script = os.path.abspath(os.path.join(workflow.basedir, 'scripts', 'rank_reactions.sh'))
rule rank_reactions:
    """
    This rule needs the Sevy/RMG-Py:extract_sources_from_model?? branch of RMG
    Also, you need to make sure the included databases match
    """
    shell:
        """
        bash -c '
            . $HOME/.bashrc
            conda activate /home/harris.se/anaconda3/envs/rmg_env/
            sbatch {rank_reactions_script}
            conda deactivate'
        """

rank_species_script = os.path.abspath(os.path.join(workflow.basedir, 'scripts', 'rank_species.sh'))
rule rank_species:
    shell:
        """
        bash -c '
            . $HOME/.bashrc
            conda activate /home/harris.se/anaconda3/envs/rmg_env/
            sbatch {rank_species_script}
            conda deactivate'
        """


run_species_thermo_script = os.path.abspath(os.path.join(workflow.basedir, 'scripts', 'run_species_thermo.sh'))
rule species_thermo:
    # This should probably be renamed to something like calc_conformers
    # TODO check whether the conformers have already run?
    conda:
        'envs/tst_env.yaml'
    shell:
        """
        bash -c '
            . $HOME/.bashrc
            conda activate /work/westgroup/harris.se/tst_env
            mkdir -p {species_dir}
            cd {species_dir}
            sbatch {run_species_thermo_script} {species_index}
            conda deactivate'
        """

rule run_rotors:
    input:
        get_lowest_conformer_script = os.path.join('scripts', 'get_lowest_conformer.py')
    shell:
        """
        bash -c '
            . $HOME/.bashrc
            conda activate /work/westgroup/harris.se/tst_env
            python {input.get_lowest_conformer_script} {species_index}
            python scripts/species_rotors.py {species_index}
            conda deactivate'
        """

rule setup_arkane_thermo:
    output:
        run_arkane_script = os.path.join(arkane_dir, 'run_arkane.sh')
    shell:
        """
        bash -c '
            . $HOME/.bashrc
            conda activate /work/westgroup/harris.se/tst_env
            python scripts/make_arkane_thermo_input.py {species_index}
            conda deactivate'
        """


rule run_arkane_thermo:
    input:
        run_arkane_script = os.path.join(arkane_dir, 'run_arkane.sh')
    shell:
        """
        bash -c '
            . $HOME/.bashrc
            conda activate /home/harris.se/anaconda3/envs/rmg_env/
            cd {arkane_dir}
            sbatch {input.run_arkane_script}
            conda deactivate'
        """


rule list_species_in_reaction:
    # determine which species calculations are needed to make the reaction calculation
    input:
        collect_species_script = os.path.join('scripts', 'kinetics', 'collect_species.py')
    shell:
        """
        bash -c '
            . $HOME/.bashrc
            conda activate /work/westgroup/harris.se/tst_env
            python {input.collect_species_script} {reaction_index}
            conda deactivate'
        """



rule species_list:
    conda:
        'envs/tst_env.yaml'
    shell:
        """
        python scripts/generate_species_list.py
        """

rule reaction_list:
    conda:
        'envs/tst_env.yaml'
    shell:
        """
        python scripts/generate_reaction_list.py
        """

rule print_lowest_conformer:
    # Rule to identify the lowest energy conformer
    input:
        print_lowest_conformer_script = os.path.join('scripts', 'get_lowest_conformer.py')
    shell:
        """
        bash -c '
            . $HOME/.bashrc
            conda activate /work/westgroup/harris.se/tst_env
            python {input.print_lowest_conformer_script} {species_index} print_only
            conda deactivate'
        """
